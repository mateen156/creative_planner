import { __decorate, __metadata, __param, __read, __spread } from "tslib";
import { Injectable, NgZone, Optional } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { LoadingBarState } from './loading-bar.state';
import { Subject, combineLatest, Observable } from 'rxjs';
import { switchMap, map, startWith } from 'rxjs/operators';
import { LOADING_BAR_CONFIG } from './loading-bar.config';
import * as i0 from "@angular/core";
import * as i1 from "./loading-bar.config";
import * as ɵngcc0 from '@angular/core';
var LoadingBarService = /** @class */ (function () {
    function LoadingBarService(platformId, config, zone) {
        var _this = this;
        if (config === void 0) { config = {}; }
        this.platformId = platformId;
        this.config = config;
        this.zone = zone;
        this.refs = {};
        this.streams$ = new Subject();
        this.value$ = this.streams$.asObservable().pipe(startWith(null), switchMap(function () { return combineLatest.apply(void 0, __spread(Object.keys(_this.refs).map(function (s) { return _this.refs[s].value$; }))); }), runInZone(this.zone), map(function (v) { return Math.max.apply(Math, __spread([0], v)); }));
    }
    Object.defineProperty(LoadingBarService.prototype, "progress$", {
        /** @deprecated use `value$` instead. */
        get: function () {
            return this.value$;
        },
        enumerable: true,
        configurable: true
    });
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.start = function (initialValue) {
        if (initialValue === void 0) { initialValue = 2; }
        this.useRef().start(initialValue);
    };
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.set = function (value) {
        this.useRef().set(value);
    };
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.increment = function (value) {
        this.useRef().increment(value);
    };
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.complete = function () {
        this.useRef().complete();
    };
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.stop = function () {
        this.useRef().stop();
    };
    LoadingBarService.prototype.useRef = function (id) {
        if (id === void 0) { id = 'default'; }
        if (!this.refs[id]) {
            this.refs[id] = new LoadingBarState(this.config);
            this.streams$.next();
            if (!isPlatformBrowser(this.platformId)) {
                this.refs[id].disable();
            }
        }
        return this.refs[id];
    };
    LoadingBarService.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LOADING_BAR_CONFIG,] }] },
        { type: NgZone, decorators: [{ type: Optional }] }
    ]; };
    LoadingBarService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LoadingBarService_Factory() { return new LoadingBarService(i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(i1.LOADING_BAR_CONFIG, 8), i0.ɵɵinject(i0.NgZone, 8)); }, token: LoadingBarService, providedIn: "root" });
    LoadingBarService = __decorate([ __param(0, Inject(PLATFORM_ID)),
        __param(1, Optional()), __param(1, Inject(LOADING_BAR_CONFIG)),
        __param(2, Optional()),
        __metadata("design:paramtypes", [Object, Object, NgZone])
    ], LoadingBarService);
LoadingBarService.ɵfac = function LoadingBarService_Factory(t) { return new (t || LoadingBarService)(ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(LOADING_BAR_CONFIG, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone, 8)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoadingBarService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [LOADING_BAR_CONFIG]
            }] }, { type: ɵngcc0.NgZone, decorators: [{
                type: Optional
            }] }]; }, null); })();
    return LoadingBarService;
}());
export { LoadingBarService };
// https://stackoverflow.com/a/57452361/1406096
export function runInZone(zone) {
    if (!zone) {
        return function (source) { return source; };
    }
    return function (source) {
        return new Observable(function (observer) {
            return source.subscribe(function (value) { return zone.run(function () { return observer.next(value); }); }, function (e) { return zone.run(function () { return observer.error(e); }); }, function () { return zone.run(function () { return observer.complete(); }); });
        });
    };
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy1iYXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0BuZ3gtbG9hZGluZy1iYXIvY29yZS9sb2FkaW5nLWJhci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBb0IsTUFBTSxNQUFNLENBQUM7QUFDNUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGtCQUFrQixFQUFvQixNQUFNLHNCQUFzQixDQUFDO0FBQzVFO0FBRUE7O0FBQUE7QUFDb0IsSUFjbEIsMkJBQytCLFVBQWtCLEVBQ0MsTUFBNkIsRUFDekQsSUFBYTtBQUNuQyxRQUpBLGlCQUlJO0FBQ04sUUFIb0QsdUJBQUEsRUFBQSxXQUE2QjtBQUMvRSxRQUYrQixlQUFVLEdBQVYsVUFBVSxDQUFRO0FBQUMsUUFDQSxXQUFNLEdBQU4sTUFBTSxDQUF1QjtBQUFDLFFBQzFELFNBQUksR0FBSixJQUFJLENBQVM7QUFBQyxRQWpCNUIsU0FBSSxHQUFzQyxFQUFFLENBQUM7QUFDdkQsUUFBVSxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztBQUN6QyxRQUFXLFdBQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FDakQsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUNmLFNBQVMsQ0FBQyxjQUFNLE9BQUEsYUFBYSx3QkFB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Q0FBQyxDQUFBO0FBQUUsUUFDeEMsV0FBQSxRQUFRLEVBQUUsQ0FBQTtBQUFFLHlDQUY0QixNQUFNLFVBRXBCLE1BQU07QUFDcEMsT0FuQlksaUJBQWlCLENBMEQ3Qjs7Ozs7Ozs7Ozs7Ozs7O2tDQUNEO0FBQ0EsNEJBckVBO0FBQUUsQ0FtRUQsQUExREQsSUEwREM7QUFDRCxTQTNEYSxpQkFBaUI7QUE0RDlCLCtDQUErQztBQUMvQyxNQUFNLFVBQVUsU0FBUyxDQUFJLElBQVk7QUFBSSxJQUMzQyxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ2IsUUFBSSxPQUFPLFVBQUMsTUFBTSxJQUFLLE9BQUEsTUFBTSxFQUFOLENBQU0sQ0FBQztBQUM5QixLQUFHO0FBQ0gsSUFDRSxPQUFPLFVBQUMsTUFBTTtBQUFJLFFBQ2hCLE9BQUEsSUFBSSxVQUFVLENBQUMsVUFBQyxRQUFRO0FBQUksWUFDMUIsT0FBQSxNQUFNLENBQUMsU0FBUyxDQUNkLFVBQUMsS0FBUSxJQUFLLE9BQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFNLE9BQUEsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBcEIsQ0FBb0IsQ0FBQyxFQUFwQyxDQUFvQyxFQUNsRCxVQUFDLENBQU0sSUFBSyxPQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBTSxPQUFBLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQWpCLENBQWlCLENBQUMsRUFBakMsQ0FBaUMsRUFDN0MsY0FBTSxPQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBTSxPQUFBLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBbkIsQ0FBbUIsQ0FBQyxFQUFuQyxDQUFtQyxDQUMxQztBQUNQLFFBTE0sQ0FJQyxDQUNGO0FBQ0wsSUFQSSxDQU1DLENBQUM7QUFDTixDQUFDO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQTEFURk9STV9JRCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBMb2FkaW5nQmFyU3RhdGUgfSBmcm9tICcuL2xvYWRpbmctYmFyLnN0YXRlJztcbmltcG9ydCB7IFN1YmplY3QsIGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUsIE9wZXJhdG9yRnVuY3Rpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHN3aXRjaE1hcCwgbWFwLCBzdGFydFdpdGggfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBMT0FESU5HX0JBUl9DT05GSUcsIExvYWRpbmdCYXJDb25maWcgfSBmcm9tICcuL2xvYWRpbmctYmFyLmNvbmZpZyc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgTG9hZGluZ0JhclNlcnZpY2Uge1xuICBwcml2YXRlIHJlZnM6IHsgW2lkOiBzdHJpbmddOiBMb2FkaW5nQmFyU3RhdGUgfSA9IHt9O1xuICBwcml2YXRlIHN0cmVhbXMkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgcmVhZG9ubHkgdmFsdWUkID0gdGhpcy5zdHJlYW1zJC5hc09ic2VydmFibGUoKS5waXBlKFxuICAgIHN0YXJ0V2l0aChudWxsKSxcbiAgICBzd2l0Y2hNYXAoKCkgPT4gY29tYmluZUxhdGVzdCguLi5PYmplY3Qua2V5cyh0aGlzLnJlZnMpLm1hcCgocykgPT4gdGhpcy5yZWZzW3NdLnZhbHVlJCkpKSxcbiAgICBydW5JblpvbmUodGhpcy56b25lKSxcbiAgICBtYXAoKHYpID0+IE1hdGgubWF4KDAsIC4uLnYpKSxcbiAgKTtcblxuICAvKiogQGRlcHJlY2F0ZWQgdXNlIGB2YWx1ZSRgIGluc3RlYWQuICovXG4gIGdldCBwcm9ncmVzcyQoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWUkO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBPYmplY3QsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChMT0FESU5HX0JBUl9DT05GSUcpIHByaXZhdGUgY29uZmlnOiBMb2FkaW5nQmFyQ29uZmlnID0ge30sXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSB6b25lPzogTmdab25lLFxuICApIHt9XG5cbiAgLyoqIEBkZXByZWNhdGVkIHVzZSBgdXNlUmVmYCBpbnN0ZWFkLiAqL1xuICBzdGFydChpbml0aWFsVmFsdWUgPSAyKSB7XG4gICAgdGhpcy51c2VSZWYoKS5zdGFydChpbml0aWFsVmFsdWUpO1xuICB9XG5cbiAgLyoqIEBkZXByZWNhdGVkIHVzZSBgdXNlUmVmYCBpbnN0ZWFkLiAqL1xuICBzZXQodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMudXNlUmVmKCkuc2V0KHZhbHVlKTtcbiAgfVxuXG4gIC8qKiBAZGVwcmVjYXRlZCB1c2UgYHVzZVJlZmAgaW5zdGVhZC4gKi9cbiAgaW5jcmVtZW50KHZhbHVlPzogbnVtYmVyKSB7XG4gICAgdGhpcy51c2VSZWYoKS5pbmNyZW1lbnQodmFsdWUpO1xuICB9XG5cbiAgLyoqIEBkZXByZWNhdGVkIHVzZSBgdXNlUmVmYCBpbnN0ZWFkLiAqL1xuICBjb21wbGV0ZSgpIHtcbiAgICB0aGlzLnVzZVJlZigpLmNvbXBsZXRlKCk7XG4gIH1cblxuICAvKiogQGRlcHJlY2F0ZWQgdXNlIGB1c2VSZWZgIGluc3RlYWQuICovXG4gIHN0b3AoKSB7XG4gICAgdGhpcy51c2VSZWYoKS5zdG9wKCk7XG4gIH1cblxuICB1c2VSZWYoaWQ6IHN0cmluZyA9ICdkZWZhdWx0Jyk6IExvYWRpbmdCYXJTdGF0ZSB7XG4gICAgaWYgKCF0aGlzLnJlZnNbaWRdKSB7XG4gICAgICB0aGlzLnJlZnNbaWRdID0gbmV3IExvYWRpbmdCYXJTdGF0ZSh0aGlzLmNvbmZpZyk7XG4gICAgICB0aGlzLnN0cmVhbXMkLm5leHQoKTtcblxuICAgICAgaWYgKCFpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICAgIHRoaXMucmVmc1tpZF0uZGlzYWJsZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlZnNbaWRdO1xuICB9XG59XG5cbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81NzQ1MjM2MS8xNDA2MDk2XG5leHBvcnQgZnVuY3Rpb24gcnVuSW5ab25lPFQ+KHpvbmU6IE5nWm9uZSk6IE9wZXJhdG9yRnVuY3Rpb248VCwgVD4ge1xuICBpZiAoIXpvbmUpIHtcbiAgICByZXR1cm4gKHNvdXJjZSkgPT4gc291cmNlO1xuICB9XG5cbiAgcmV0dXJuIChzb3VyY2UpID0+XG4gICAgbmV3IE9ic2VydmFibGUoKG9ic2VydmVyKSA9PlxuICAgICAgc291cmNlLnN1YnNjcmliZShcbiAgICAgICAgKHZhbHVlOiBUKSA9PiB6b25lLnJ1bigoKSA9PiBvYnNlcnZlci5uZXh0KHZhbHVlKSksXG4gICAgICAgIChlOiBhbnkpID0+IHpvbmUucnVuKCgpID0+IG9ic2VydmVyLmVycm9yKGUpKSxcbiAgICAgICAgKCkgPT4gem9uZS5ydW4oKCkgPT4gb2JzZXJ2ZXIuY29tcGxldGUoKSksXG4gICAgICApLFxuICAgICk7XG59XG4iXX0=