{"version":3,"file":"ngx-loading-bar-router.js","sources":["ng:/@ngx-loading-bar/router/router.module.ts","ng:/@ngx-loading-bar/router/ngx-loading-bar-router.ts"],"names":[],"mappings":";;;;;;;;;IAgBE,gCAAY,MAAc,EAAE,MAAyB;AACvD,QADE,iBAgBC;AACH,QAhBI,IAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AACxC,QAAI,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,UAAC,KAAK;AAAI,YAChC,IAAM,QAAQ,GAAG,KAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;AAC9D,YAAM,IAAI,QAAQ,IAAI,QAAQ,CAAC,gBAAgB,EAAE;AACjD,gBAAQ,OAAO;AACf,aAAO;AACP,YACM,IAAI,KAAK,YAAY,eAAe,EAAE;AAC5C,gBAAQ,GAAG,CAAC,KAAK,EAAE,CAAC;AACpB,aAAO;AACP,YACM,IAAI,KAAK,YAAY,eAAe,IAAI,KAAK,YAAY,aAAa,IAAI,KAAK,YAAY,gBAAgB,EAAE;AACnH,gBAAQ,GAAG,CAAC,QAAQ,EAAE,CAAC;AACvB,aAAO;AACP,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACU,0DAAyB,GAAjC,UAAkC,MAAW;AAC/C;AACI,QAAA,IAAM,iBAAiB,GAAG,MAAM,CAAC,oBAAoB,IAAI,MAAM,CAAC,oBAAoB,EAAE,CAAC;AAC3F,QAAI,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,MAAM,EAAE;AACvD,YAAM,OAAO,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC;AAC5C,SAAK;AACL,QACI,OAAO,EAAE,CAAC;AACd,KAAG;AACF;AACiE,gBA5B5C,MAAM;AAAI,gBAAM,iBAAiB;AAAG;AACjD,IAFI,sBAAsB,wBAJlC,QAAQ,CAAC,cACR,OAAO,EAAE,CAAC,YAAY,EAAE,xDAGlB,kCACc,MAAM,EAAU,iBAAiB;UAJb,CAAC,cACzC,zBAGwD,OAD7C,sBAAsB,CA4BlC;AA9BQ,EAAE,CAAC,YAAY,EAAE,gBAAgB,CAAC,WAC1C,CAAC;;;;;;;;;2GA8BF;AAAC,IADD,6BAAC;AACA,CA7BD;AAAK;ACfL;AACA;AACA,GAAG;AACH;AACA;AACK","sourcesContent":["import { NgModule } from '@angular/core';\nimport {\n  RouterModule,\n  Router,\n  NavigationStart,\n  NavigationError,\n  NavigationEnd,\n  NavigationCancel,\n} from '@angular/router';\nimport { LoadingBarModule, LoadingBarService } from '@ngx-loading-bar/core';\n\n@NgModule({\n  imports: [RouterModule, LoadingBarModule],\n  exports: [RouterModule, LoadingBarModule],\n})\nexport class LoadingBarRouterModule {\n  constructor(router: Router, loader: LoadingBarService) {\n    const ref = loader.useRef('router');\n    router.events.subscribe((event) => {\n      const navState = this.getCurrentNavigationState(router);\n      if (navState && navState.ignoreLoadingBar) {\n        return;\n      }\n\n      if (event instanceof NavigationStart) {\n        ref.start();\n      }\n\n      if (event instanceof NavigationError || event instanceof NavigationEnd || event instanceof NavigationCancel) {\n        ref.complete();\n      }\n    });\n  }\n\n  private getCurrentNavigationState(router: any) {\n    // `getCurrentNavigation` only available in angular `7.2`\n    const currentNavigation = router.getCurrentNavigation && router.getCurrentNavigation();\n    if (currentNavigation && currentNavigation.extras) {\n      return currentNavigation.extras.state;\n    }\n\n    return {};\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}